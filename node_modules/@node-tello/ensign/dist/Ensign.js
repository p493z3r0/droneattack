"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Ensign = void 0;
const events_1 = require("events");
const dgram_1 = require("dgram");
const h264decoder_1 = require("h264decoder");
// const Split = require('stream-split');
const colours_1 = require("./utils/colours");
const EnsignEvent_1 = require("./enums/EnsignEvent");
/**
 *
 */
class Ensign extends events_1.EventEmitter {
    /**
     *
     */
    constructor(options) {
        super();
        const defaults = {
            localAddress: '0.0.0.0',
            localPort: 11111
        };
        const localOptions = {
            ...defaults,
            ...options
        };
        // this._outStream = localOptions.outStream;
        this._localAddress = localOptions.localAddress;
        this._localPort = localOptions.localPort;
        this._takeSnap = false;
        this._decoder = new h264decoder_1.H264Decoder();
        this._socket = dgram_1.createSocket('udp4');
    }
    /**
     *
     */
    initialise() {
        this._bindSocket();
    }
    /**
     *
     */
    snap() {
        this._takeSnap = true;
    }
    /**
     *
     * @param msg
     * @private
     */
    _handleMessage(msg) {
        if (this._takeSnap === true) {
            const ret = this._decoder.decode(msg);
            if (ret === h264decoder_1.H264Decoder.PIC_RDY) {
                const rgb = colours_1.YUV2RBG(this._decoder.pic, this._decoder.width, this._decoder.height);
                const ppm = colours_1.RGB2PPM(rgb, this._decoder.width, this._decoder.height);
                this.emit(EnsignEvent_1.EnsignEventEnum.snap, ppm);
                this._takeSnap = false;
            }
        }
    }
    /**
     *
     * @private
     */
    _bindSocket() {
        this._socket.on('error', (err) => {
            // this.emit(CommanderEventEnum.error, err);
            this._socket.close();
        });
        this._socket.on('close', () => {
            this._socket.close();
        });
        this._socket.on('message', (msg) => this._handleMessage(msg));
        this._socket.on('listening', () => {
            const address = this._socket.address();
            console.log(`server listening ${address.address}:${address.port}`);
        });
        this._socket.bind(this._localPort, this._localAddress);
    }
    /**
     *
     */
    get localAddress() { return this._localAddress; }
    get localPort() { return this._localPort; }
}
exports.Ensign = Ensign;
//# sourceMappingURL=Ensign.js.map