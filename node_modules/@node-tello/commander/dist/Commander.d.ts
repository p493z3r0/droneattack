/// <reference types="node" />
import { EventEmitter } from 'events';
import { ReadCommandEnum } from './enums/ReadCommand';
import { SetCommandEnum } from './enums/SetCommand';
import { ControlCommandEnum } from './enums/ControlCommand';
/**
 *
 */
export interface ICommanderOptions {
    remoteAddress: string;
    remotePort: number;
    localAddress?: string;
    localPort?: number;
}
export interface ISendCommandOptions {
    readCommand?: boolean;
    timeout?: number;
}
/**
 *
 */
export declare class Commander extends EventEmitter {
    /**
     *
     */
    private readonly _socket;
    private readonly _localAddress;
    private readonly _localPort;
    private readonly _remoteAddress;
    private readonly _remotePort;
    private _initialised;
    private _socketBound;
    /**
     *
     */
    constructor(options?: ICommanderOptions);
    /**
     *
     */
    initialise(): Promise<void>;
    destroy(): Promise<void>;
    /**
     *
     * @param command
     * @param params
     */
    control(command: ControlCommandEnum, params?: Array<string | number>): Promise<boolean>;
    /**
     *
     * @param command
     * @param params
     */
    set(command: SetCommandEnum, params?: Array<string | number>): Promise<boolean>;
    /**
     *
     * @param command
     * @param params
     */
    read(command: ReadCommandEnum, params?: Array<string | number>): Promise<string>;
    /**
     *
     * @param commandType
     * @param params
     * @param options
     */
    private _sendCommand;
    /**
     *
     * @private
     */
    private _bindSocket;
    /**
     *
     */
    get localAddress(): string;
    get localPort(): number;
    get remoteAddress(): string;
    get remotePort(): number;
    get initialised(): boolean;
}
