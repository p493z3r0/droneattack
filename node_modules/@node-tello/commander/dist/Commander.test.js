"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = require("chai");
const sinon_1 = __importDefault(require("sinon"));
const Commander_1 = require("./Commander");
const ControlCommand_1 = require("./enums/ControlCommand");
const SetCommand_1 = require("./enums/SetCommand");
const ReadCommand_1 = require("./enums/ReadCommand");
describe('Commander', () => {
    afterEach(() => {
        sinon_1.default.restore();
    });
    /////////////////////////////////////
    //
    // constructor
    describe('constructor', () => {
        it('should set the options passed to it', () => {
            const commander = new Commander_1.Commander({
                remoteAddress: '127.0.0.1',
                remotePort: 1234,
            });
            chai_1.expect(commander.remoteAddress).to.eql('127.0.0.1');
            chai_1.expect(commander.remotePort).to.eql(1234);
        });
    });
    /////////////////////////////////////
    //
    // initialise
    describe('initialise', () => {
        let commander;
        beforeEach(() => {
            commander = new Commander_1.Commander({
                remoteAddress: '127.0.0.1',
                remotePort: 1234,
            });
        });
        it('should call _bindSocket', () => {
            // @ts-ignore
            const spy = sinon_1.default.stub(commander, '_bindSocket');
            commander.initialise();
            chai_1.expect(spy.callCount).to.eql(1);
        });
        it('should set initialised to true once complete', () => {
            sinon_1.default
                // @ts-ignore
                .stub(commander, '_bindSocket');
            commander.initialise();
            chai_1.expect(commander.initialised).to.eql(true);
        });
        it('should set initialised to false if binding the port fails', () => {
            sinon_1.default
                // @ts-ignore
                .stub(commander, '_bindSocket')
                .throws(new Error());
            try {
                commander.initialise();
            }
            catch (e) {
                chai_1.expect(commander.initialised).to.equal(false);
            }
        });
    });
    /////////////////////////////////////
    //
    // close
    describe('close', () => { });
    /////////////////////////////////////
    //
    // control
    describe('control', () => {
        let commander;
        beforeEach(() => {
            commander = new Commander_1.Commander({
                remoteAddress: '127.0.0.1',
                remotePort: 1234,
            });
            // @ts-ignore
            sinon_1.default.stub(commander, '_bindSocket');
            commander.initialise();
        });
        it('should call _sendCommand with the correct arguments', () => {
            // @ts-ignore
            const spy = sinon_1.default.stub(commander, '_sendCommand');
            commander.control(ControlCommand_1.ControlCommandEnum.takeoff);
            chai_1.expect(spy.callCount).to.eql(1);
            chai_1.expect(spy.calledWith('takeoff')).to.equal(true);
        });
    });
    /////////////////////////////////////
    //
    // set
    describe('set', () => {
        let commander;
        beforeEach(() => {
            commander = new Commander_1.Commander({
                remoteAddress: '127.0.0.1',
                remotePort: 1234,
            });
            // @ts-ignore
            sinon_1.default.stub(commander, '_bindSocket');
            commander.initialise();
        });
        it('should call _sendCommand with the correct arguments', () => {
            // @ts-ignore
            const spy = sinon_1.default.stub(commander, '_sendCommand');
            commander.set(SetCommand_1.SetCommandEnum.speed);
            chai_1.expect(spy.callCount).to.eql(1);
            chai_1.expect(spy.calledWith('speed')).to.equal(true);
        });
    });
    /////////////////////////////////////
    //
    // control
    describe('read', () => {
        let commander;
        beforeEach(() => {
            commander = new Commander_1.Commander({
                remoteAddress: '127.0.0.1',
                remotePort: 1234,
            });
            // @ts-ignore
            sinon_1.default.stub(commander, '_bindSocket');
            commander.initialise();
        });
        it('should call _sendCommand with the correct arguments', () => {
            // @ts-ignore
            const spy = sinon_1.default.stub(commander, '_sendCommand');
            commander.read(ReadCommand_1.ReadCommandEnum.battery);
            chai_1.expect(spy.callCount).to.eql(1);
            chai_1.expect(spy.calledWith('battery')).to.equal(true);
        });
    });
});
//# sourceMappingURL=Commander.test.js.map