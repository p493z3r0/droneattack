"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Drone = void 0;
const events_1 = require("events");
const commander_1 = require("@node-tello/commander");
const cadet_1 = require("@node-tello/cadet");
// import { Ensign } from '@node-tello/ensign';
const DroneEvent_1 = require("./enums/DroneEvent");
/**
 *
 */
class Drone extends events_1.EventEmitter {
    // private readonly ensign: Ensign;
    /**
     *
     */
    constructor(options) {
        super();
        const defaults = {
            address: '192.168.10.1',
            commandPort: 8889,
            statePort: 8890,
            videoPort: 11111
        };
        const localOptions = {
            ...defaults,
            ...options
        };
        this.commander = new commander_1.Commander({
            remoteAddress: localOptions.address,
            remotePort: localOptions.commandPort
        });
        this.cadet = new cadet_1.Cadet({
            localPort: localOptions.statePort
        });
        // this.ensign = new Ensign({
        //   localPort: localOptions.videoPort
        // });
    }
    /**
     *
     */
    async initalise() {
        this.cadet.on('state', (state) => this.emit(DroneEvent_1.DroneEventEnum.state, state));
        this.cadet.initialise();
        await this.commander.initialise();
    }
    /**
     *
     */
    disconnect() {
        this.commander.destroy();
    }
    // Control
    takeoff() { return this.commander.control(commander_1.ControlCommandEnum.takeoff); }
    land() { return this.commander.control(commander_1.ControlCommandEnum.land); }
    streamOn() { return this.commander.control(commander_1.ControlCommandEnum.streamon); }
    streamOff() { return this.commander.control(commander_1.ControlCommandEnum.streamoff); }
    emergency() { return this.commander.control(commander_1.ControlCommandEnum.emergency); }
    up(x) { return this.commander.control(commander_1.ControlCommandEnum.up, [x]); }
    down(x) { return this.commander.control(commander_1.ControlCommandEnum.down, [x]); }
    left(x) { return this.commander.control(commander_1.ControlCommandEnum.left, [x]); }
    right(x) { return this.commander.control(commander_1.ControlCommandEnum.right, [x]); }
    forward(x) { return this.commander.control(commander_1.ControlCommandEnum.forward, [x]); }
    back(x) { return this.commander.control(commander_1.ControlCommandEnum.back, [x]); }
    cw() { return this.commander.control(commander_1.ControlCommandEnum.cw); }
    ccw() { return this.commander.control(commander_1.ControlCommandEnum.ccw); }
    flip() { return this.commander.control(commander_1.ControlCommandEnum.flip); }
    go() { return this.commander.control(commander_1.ControlCommandEnum.go); }
    stop() { return this.commander.control(commander_1.ControlCommandEnum.stop); }
    curve() { return this.commander.control(commander_1.ControlCommandEnum.curve); }
    jump() { return this.commander.control(commander_1.ControlCommandEnum.jump); }
    // Set
    setSpeed() { return this.commander.set(commander_1.SetCommandEnum.speed); }
    setRc() { return this.commander.set(commander_1.SetCommandEnum.rc); }
    setWifi() { return this.commander.set(commander_1.SetCommandEnum.wifi); }
    enabledMission() { return this.commander.set(commander_1.SetCommandEnum.mon); }
    disableMission() { return this.commander.set(commander_1.SetCommandEnum.moff); }
    setMissionDirection() { return this.commander.set(commander_1.SetCommandEnum.mdirection); }
    setAp() { return this.commander.set(commander_1.SetCommandEnum.ap); }
    // Read
    getSpeed() { return this.commander.read(commander_1.ReadCommandEnum.speed); }
    getBattery() { return this.commander.read(commander_1.ReadCommandEnum.battery); }
    getTime() { return this.commander.read(commander_1.ReadCommandEnum.time); }
    getWifi() { return this.commander.read(commander_1.ReadCommandEnum.wifi); }
    getSDK() { return this.commander.read(commander_1.ReadCommandEnum.sdk); }
    getSerialNumber() { return this.commander.read(commander_1.ReadCommandEnum.sn); }
}
exports.Drone = Drone;
//# sourceMappingURL=Drone.js.map